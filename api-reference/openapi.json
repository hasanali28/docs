{
  "openapi": "3.1.0",
  "info": {
    "title": "OpenAPI Plant Store",
    "description": "A sample API that uses a plant store as an example to demonstrate features in the OpenAPI specification",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://nexusdev-wjs-api-dev.mangoforest-291de162.swedencentral.azurecontainerapps.io"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/api/auth/request-password-reset": {
      "post": {
        "summary": "Request Password Reset",
        "description": "Documentation\n{{baseUrl}}/api/auth/request-password-reset\n\n### Request Description\nThis endpoint is used to initiate a request for resetting the user's password. The request should be sent as an HTTP POST to the specified URL with the user's email provided in the request body.\n\n### Request Body\n- email (string, required): The email address of the user for whom the password reset request is being initiated.\n\n### Response Description\nThe response to this request will provide information about the status of the password reset request. The response body will include relevant details such as a success message or an error message, depending on the outcome of the request.",
        "tags": ["Authentication"],
        "operationId": "authRequestPasswordReset",
        "security": [],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "enum": ["application/json"] }
          },
          {
            "name": "Cookie",
            "in": "header",
            "required": false,
            "schema": { "type": "string", "example": "auth=<token>" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestPasswordResetRequest"
              },
              "examples": {
                "default": { "value": { "email": "arvind@weya.ai" } }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset request accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestPasswordResetResponse"
                },
                "examples": {
                  "default": {
                    "value": {
                      "message": "If an account exists for this email, a reset link has been sent."
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --location '{{baseUrl}}/api/auth/request-password-reset' --header 'Content-Type: application/json' --header 'Cookie: auth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MDIwMWNmNWIzNjQ0YjQ4YmNiMzU4YSIsInJvbGUiOiJ1c2VyIiwic3RhdHVzIjoiYXBwcm92ZWQiLCJpYXQiOjE3NTc0OTkzNTgsImV4cCI6MTc2MDA5MTM1OH0.sLuF-XybcpHVs-Z3lTRUGGzeh3Omk1YsLAcWvSgfZYc' --data-raw '{\\n    \"email\": \"arvind@weya.ai\"\\n}'"
          }
        ]
      }
    },
    "/api/agents/create/call": {
      "post": {
        "summary": "Create Call for Agent",
        "description": "Initiates a call session with a specified agent. The call is associated with the given agent ID and optionally a name for reference.",
        "tags": ["Agents"],
        "operationId": "createAgentCall",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "example": "Bearer {{authToken}}" }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "enum": ["application/json"] }
          },
          {
            "name": "Cookie",
            "in": "header",
            "required": false,
            "schema": { "type": "string", "example": "auth=<token>" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["agentId", "name"],
                "properties": {
                  "agentId": {
                    "type": "string",
                    "description": "The ID of the agent to call"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the person or reference for the call"
                  }
                }
              },
              "examples": {
                "default": {
                  "value": {
                    "agentId": "684135442bc2d87ddfe0697f",
                    "name": "Arvind"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Call created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Call created successfully"
                    },
                    "call": {
                      "type": "object",
                      "properties": {
                        "callId": { "type": "string", "example": "12345abcde" },
                        "agentId": {
                          "type": "string",
                          "example": "684135442bc2d87ddfe0697f"
                        },
                        "name": { "type": "string", "example": "Arvind" },
                        "status": { "type": "string", "example": "initiated" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Missing agentId or name" },
          "401": { "description": "Unauthorized: User must be logged in" },
          "500": { "description": "Internal server error while creating call" }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --location --request POST '{{baseUrl}}/api/agents/create/call' \\\n--header 'Authorization: Bearer {{authToken}}' \\\n--header 'Content-Type: application/json' \\\n--data '{\"agentId\":\"684135442bc2d87ddfe0697f\",\"name\":\"Arvind\"}'"
          }
        ]
      }
    },
    "/api/agents/validate-conversation": {
      "post": {
        "summary": "Validate Conversation",
        "description": "Documentation\n{{baseUrl}}/api/agents/validate-conversation\n\n### API Request Description\nThis endpoint validates a conversation configuration for an agent. It checks if the conversation type, system instructions, and states are properly defined. Useful for ensuring the agent's workflow is correctly structured before deployment.",
        "tags": ["Agents"],
        "operationId": "validateConversation",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "example": "Bearer {{authToken}}" }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "enum": ["application/json"] }
          },
          {
            "name": "Cookie",
            "in": "header",
            "required": false,
            "schema": { "type": "string", "example": "auth=<token>" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateConversationRequest"
              },
              "examples": {
                "default": {
                  "value": {
                    "conversationType": "multi_prompt",
                    "systemMessage": {
                      "common": {
                        "agent_information": "You are a customer service agent."
                      },
                      "states": {
                        "START": {
                          "goal": "Identify customer issue"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Conversation validated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateConversationResponse"
                },
                "examples": {
                  "default": {
                    "value": {
                      "message": "Conversation configuration is valid",
                      "isValid": true,
                      "errors": []
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --location '{{baseUrl}}/api/agents/validate-conversation' \\\n--header 'Authorization: Bearer {{authToken}}' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"conversationType\": \"multi_prompt\",\n  \"systemMessage\": {\n    \"common\": {\"agent_information\": \"You are a customer service agent.\"},\n    \"states\": {\"START\": {\"goal\": \"Identify customer issue\"}}\n  }\n}'"
          }
        ]
      }
    },
    "/api/call/add-phone": {
      "post": {
        "summary": "Add Phone Number",
        "description": "Add a phone number to a user's account, associated with a specific integration (e.g., Twilio). The phone number is validated, saved, and linked to the user for future call-related operations.",
        "tags": ["Calls"],
        "operationId": "addPhoneNumber",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer <jwt-token>"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddPhoneRequest"
              },
              "example": {
                "userId": "64e5f12345abcdef12345678",
                "phoneNumber": "+15551234567",
                "integration": "twilio",
                "authToken": "your_twilio_auth_token",
                "accSId": "your_twilio_account_sid"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Phone number added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddPhoneResponse"
                },
                "example": {
                  "success": true,
                  "phone": {
                    "_id": "605c72ef1532073ac924d4bc",
                    "userId": "64e5f12345abcdef12345678",
                    "phoneNumber": "+15551234567",
                    "integration": "twilio",
                    "authToken": "your_twilio_auth_token",
                    "accSId": "your_twilio_account_sid"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request — Invalid input or phone number duplication",
            "content": {
              "application/json": {
                "examples": {
                  "invalidUser": { "value": { "error": "Invalid User ID" } },
                  "notFound": { "value": { "error": "User not found" } },
                  "duplicate": {
                    "value": {
                      "error": "Phone number already exists for this user"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": { "error": "Internal Server Error" }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --location '{{baseUrl}}/api/call/add-phone' \\\n--header 'Authorization: Bearer {{authToken}}' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"userId\": \"64e5f12345abcdef12345678\",\n  \"phoneNumber\": \"+15551234567\",\n  \"integration\": \"twilio\",\n  \"authToken\": \"your_twilio_auth_token\",\n  \"accSId\": \"your_twilio_account_sid\"\n}'"
          }
        ]
      }
    },
    "/api/knowledgeBase": {
      "get": {
        "summary": "Get All Knowledge Bases",
        "description": "Retrieve all knowledge bases associated with the authenticated user's organization.",
        "tags": ["Knowledge Base"],
        "operationId": "getAllKnowledgeBases",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "example": "Bearer <token>" }
          },
          {
            "name": "Cookie",
            "in": "header",
            "required": false,
            "schema": { "type": "string", "example": "auth=<jwt-token>" }
          }
        ],
        "responses": {
          "200": {
            "description": "Knowledge bases retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnowledgeBasesResponse"
                },
                "examples": {
                  "default": {
                    "value": {
                      "message": "Knowledge bases retrieved successfully",
                      "data": [
                        {
                          "_id": "64e5f12345abcdef12345678",
                          "organizationId": "org1234567890",
                          "knowledgeBaseName": "Technical Documentation",
                          "bucketUrl": "https://bucket-name.s3.region.amazonaws.com/org1234567890/64e5f12345abcdef12345678/",
                          "vectorDbCollection": "generated-collection-id",
                          "createdAt": "2025-01-15T08:21:33.000Z",
                          "updatedAt": "2025-01-15T08:21:33.000Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized request" },
          "500": { "description": "Internal server error" }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --location 'http://localhost:5001/api/knowledgeBase/' \\\n--header 'Authorization: Bearer {{authToken}}' \\\n--header 'Cookie: auth=<jwt-token>'"
          }
        ]
      }
    },

    "/api/knowledgeBase/{id}": {
      "get": {
        "summary": "Get Knowledge Base by ID",
        "description": "Retrieve a single knowledge base by its unique identifier.",
        "tags": ["Knowledge Base"],
        "operationId": "getKnowledgeBaseById",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Unique identifier of the knowledge base"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "example": "Bearer <token>" }
          },
          {
            "name": "Cookie",
            "in": "header",
            "required": false,
            "schema": { "type": "string", "example": "auth=<jwt-token>" }
          }
        ],
        "responses": {
          "200": {
            "description": "Knowledge base retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnowledgeBaseResponse"
                },
                "examples": {
                  "default": {
                    "value": {
                      "message": "Knowledge base retrieved successfully",
                      "data": {
                        "_id": "64e5f12345abcdef12345678",
                        "organizationId": "org1234567890",
                        "knowledgeBaseName": "Technical Documentation",
                        "bucketUrl": "https://bucket-name.s3.region.amazonaws.com/org1234567890/64e5f12345abcdef12345678/",
                        "vectorDbCollection": "generated-collection-id",
                        "createdAt": "2025-01-15T08:21:33.000Z",
                        "updatedAt": "2025-01-15T08:21:33.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": { "description": "Knowledge base not found" },
          "401": { "description": "Unauthorized request" },
          "500": { "description": "Internal server error" }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --location 'http://localhost:5001/api/knowledgeBase/{id}' \\\n--header 'Authorization: Bearer {{authToken}}' \\\n--header 'Cookie: auth=<jwt-token>'"
          }
        ]
      }
    },
    "/api/knowledgeBase/createKnowledgeBase": {
      "post": {
        "summary": "Create Knowledge Base",
        "description": "Documentation\n{{baseUrl}}/api/knowledgeBase/createKnowledgeBase\n\n### API Request Description\nThis API endpoint allows users to create or update a knowledge base by uploading one or more files. Files are stored in Amazon S3, and a vector database collection is generated for semantic search.\n\n### Request Body\n- knowledgeBaseName (string): Name of the knowledge base to be created or updated.\n- files (file[]): Files (PDF, DOCX, TXT, etc.) to be uploaded.\n\n### Response Body\nUpon successful execution, the API returns status 200 and details of the created or updated knowledge base.",
        "tags": ["Knowledge Base"],
        "operationId": "createKnowledgeBase",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "example": "Bearer <token>" }
          },
          {
            "name": "Cookie",
            "in": "header",
            "required": false,
            "schema": { "type": "string", "example": "auth=<jwt-token>" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": ["knowledgeBaseName", "files"],
                "properties": {
                  "knowledgeBaseName": {
                    "type": "string",
                    "description": "Name of the knowledge base",
                    "example": "Technical Documentation"
                  },
                  "files": {
                    "type": "array",
                    "items": { "type": "string", "format": "binary" },
                    "description": "Array of files to be uploaded"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Knowledge base created/updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnowledgeBaseResponse"
                },
                "examples": {
                  "default": {
                    "value": {
                      "message": "Files uploaded successfully, vectorDbCollection updated",
                      "data": {
                        "_id": "64e5f12345abcdef12345678",
                        "organizationId": "org1234567890",
                        "knowledgeBaseName": "Technical Documentation",
                        "bucketUrl": "https://bucket-name.s3.region.amazonaws.com/org1234567890/64e5f12345abcdef12345678/",
                        "vectorDbCollection": "generated-collection-id",
                        "createdAt": "2025-01-15T08:21:33.000Z",
                        "updatedAt": "2025-01-15T08:21:33.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing required fields or invalid input"
          },
          "401": {
            "description": "Unauthorized request"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --location '{{baseUrl}}/api/knowledgeBase/createKnowledgeBase' \\\n--header 'Authorization: Bearer {{authToken}}' \\\n--form 'knowledgeBaseName=\"Technical Documentation\"' \\\n--form 'files=@\"/path/to/document1.pdf\"' \\\n--form 'files=@\"/path/to/document2.docx\"' \\\n--form 'files=@\"/path/to/document3.txt\"'"
          }
        ]
      }
    },
    "/api/usecases": {
      "post": {
        "summary": "Create Use Case",
        "description": "Create a new use case for a given agent. Supports uploading a file along with other use case details such as name, description, link, and phone numbers.",
        "tags": ["Use Cases"],
        "operationId": "createUseCase",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "example": "multipart/form-data"
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "example": "auth=<jwt-token>"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateUseCaseRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Use case created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UseCaseResponse"
                },
                "example": {
                  "_id": "6853e3a46b819d90c0f6e77dd",
                  "userId": "684132694e7d1273d10e499a",
                  "agentId": "684135442bc2d87ddfe0697f",
                  "useCaseName": "TestingAgent",
                  "useCaseLink": "",
                  "useCaseDesc": "",
                  "fileUrl": "https://bucket-name.s3.region.amazonaws.com/usecases/file.pdf",
                  "batchId": "684137042bc2d87ddfe06a30",
                  "phoneNumbers": ["6853d286b819d90c0f6e77cc"],
                  "createdAt": "2025-05-03T15:00:00.000Z",
                  "updatedAt": "2025-05-03T15:00:00.000Z"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or missing required fields"
          },
          "500": {
            "description": "Internal server error while creating use case"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --location '{{baseUrl}}/api/usecases' \\\n--header 'Content-Type: multipart/form-data' \\\n--header 'Cookie: auth=<jwt-token>' \\\n--form 'userId=\"684132694e7d1273d10e499a\"' \\\n--form 'agentId=\"684135442bc2d87ddfe0697f\"' \\\n--form 'useCaseLink=\"\"' \\\n--form 'useCaseDesc=\"\"' \\\n--form 'file=@\"/path/to/file\"' \\\n--form 'useCaseName=\"TestingAgent\"' \\\n--form 'batchId=\"684137042bc2d87ddfe06a30\"' \\\n--form 'phoneNumbers=\"6853d286b819d90c0f6e77cc\"'"
          }
        ]
      }
    },
    "/api/agents/addKnowledgeBase": {
      "post": {
        "summary": "Add Knowledge Base",
        "description": "Documentation\n{{baseUrl}}/api/agents/addKnowledgeBase\n\n### API Request Description\nThis endpoint uploads documents to a knowledge base associated with the authenticated user's organization. Files are stored on S3 and processed via an external API to generate a vector database collection.",
        "tags": ["Knowledge Base"],
        "operationId": "addKnowledgeBase",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "example": "Bearer {{authToken}}" }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "enum": ["multipart/form-data"] }
          },
          {
            "name": "Cookie",
            "in": "header",
            "required": false,
            "schema": { "type": "string", "example": "auth=<token>" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": ["knowledgeBaseName", "files"],
                "properties": {
                  "knowledgeBaseName": {
                    "type": "string",
                    "description": "Name of the knowledge base"
                  },
                  "files": {
                    "type": "array",
                    "items": { "type": "string", "format": "binary" },
                    "description": "One or more files to upload (PDF, TXT, etc.)"
                  }
                }
              },
              "examples": {
                "default": {
                  "value": {
                    "knowledgeBaseName": "Support Documentation",
                    "files": [
                      "/path/to/document1.pdf",
                      "/path/to/document2.txt"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Files uploaded successfully, vectorDbCollection updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddKnowledgeBaseResponse"
                },
                "examples": {
                  "default": {
                    "value": {
                      "message": "Files uploaded successfully, vectorDbCollection updated",
                      "data": {
                        "_id": "64f0b3e5d6c8a2e5d72b5c91",
                        "organizationId": "649dcbf1e947f20f4ab2c58b",
                        "knowledgeBaseName": "Support Documentation",
                        "bucketUrl": "https://your-bucket.s3.region.amazonaws.com/orgId/knowledgeBaseId/",
                        "vectorDbCollection": "collection_id_123456",
                        "__v": 0
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing knowledgeBaseName or no files uploaded"
          },
          "401": {
            "description": "Unauthorized: User must be logged in and associated with an organization"
          },
          "500": {
            "description": "File upload failed or invalid response from external API"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --location '{{baseUrl}}/api/agents/addKnowledgeBase' \\\n--header 'Authorization: Bearer {{authToken}}' \\\n--form 'knowledgeBaseName=\"Support Documentation\"' \\\n--form 'files=@\"/path/to/document1.pdf\"' \\\n--form 'files=@\"/path/to/document2.txt\"'"
          }
        ]
      }
    },
    "/api/agents/conversation-templates": {
      "get": {
        "summary": "Get Conversation Templates",
        "description": "Retrieves all available conversation templates for agents. Templates include metadata such as name, description, and type (single or multi-prompt).",
        "tags": ["Agents"],
        "operationId": "getConversationTemplates",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "required": false,
            "schema": { "type": "string", "example": "auth=<token>" }
          }
        ],
        "responses": {
          "200": {
            "description": "List of conversation templates retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationTemplatesResponse"
                },
                "examples": {
                  "default": {
                    "value": {
                      "message": "Conversation templates retrieved successfully",
                      "templates": [
                        {
                          "_id": "64f0b3e5d6c8a2e5d72b5c91",
                          "name": "Customer Support - Basic",
                          "description": "Handles basic customer support inquiries",
                          "conversationType": "single_prompt",
                          "createdAt": "2025-01-01T10:00:00Z",
                          "updatedAt": "2025-01-05T12:00:00Z"
                        },
                        {
                          "_id": "64f0b3e5d6c8a2e5d72b5c92",
                          "name": "Sales Inquiry - Multi-step",
                          "description": "Guides the customer through a multi-step sales conversation",
                          "conversationType": "multi_prompt",
                          "createdAt": "2025-01-02T11:00:00Z",
                          "updatedAt": "2025-01-06T13:00:00Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --location '{{baseUrl}}/api/agents/conversation-templates' \\\n--header 'Cookie: auth=<token>'"
          }
        ]
      }
    },
    "/api/agents/{id}/ambient-noise": {
      "put": {
        "summary": "Update Ambient Noise Settings",
        "description": "Documentation\n{{baseUrl}}/api/agents/{id}/ambient-noise\n\n### Request Description\nUpdates the ambient noise configuration for a specific agent, including toggling ambient noise, adjusting volume, and specifying audio characteristics.",
        "tags": ["Agents"],
        "operationId": "updateAmbientNoise",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6815701194899f4a2b71c0bc"
            },
            "description": "Agent ID to update"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "example": "Bearer {{authToken}}" }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "enum": ["application/json"] }
          },
          {
            "name": "Cookie",
            "in": "header",
            "required": false,
            "schema": { "type": "string", "example": "auth=<token>" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "enable": { "type": "boolean", "example": true },
                  "name": { "type": "string", "example": "restaurant" },
                  "volume": { "type": "number", "example": 0.5 },
                  "tts_model_id": {
                    "type": "string",
                    "example": "eleven_turbo_v2_5"
                  },
                  "audio_file_name": {
                    "type": "string",
                    "example": "restaurant-ambience.wav"
                  }
                },
                "required": ["enable", "name"]
              },
              "examples": {
                "default": {
                  "value": {
                    "enable": true,
                    "name": "restaurant",
                    "volume": 0.5,
                    "tts_model_id": "eleven_turbo_v2_5"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ambient noise settings updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "settings": {
                      "type": "object",
                      "properties": {
                        "enable": { "type": "boolean" },
                        "name": { "type": "string" },
                        "volume": { "type": "number" },
                        "tts_model_id": { "type": "string" },
                        "audio_file_name": { "type": "string" }
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "value": {
                      "message": "Ambient noise settings updated successfully",
                      "settings": {
                        "enable": true,
                        "volume": 0.5,
                        "name": "restaurant",
                        "tts_model_id": "eleven_turbo_v2_5"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --location --request PUT '{{baseUrl}}/api/agents/6815701194899f4a2b71c0bc/ambient-noise' \\\n--header 'Authorization: Bearer {{authToken}}' \\\n--header 'Content-Type: application/json' \\\n--data '{\"enable\":true,\"name\":\"restaurant\",\"volume\":0.5,\"tts_model_id\":\"eleven_turbo_v2_5\"}'"
          }
        ]
      }
    },

    "/api/auth/google/login": {
      "post": {
        "summary": "Google Login",
        "description": "Documentation\n{{baseUrl}}/api/auth/google/login\n\n### API Request Description\nThis endpoint is used to initiate a Google login by sending an HTTP POST request to the specified URL. The request should include the Google authorization code in the request body.\n\n### Request Body\n- authCode (string, required): The Google authorization code obtained during the Google authentication process.\n\n### Response Body\nThe response to this request will include the authentication result or any relevant data based on the successful processing of the Google login request.",
        "tags": ["Authentication"],
        "operationId": "authGoogleLogin",
        "security": [],
        "parameters": [
          {
            "name": "authCode",
            "in": "query",
            "required": false,
            "schema": { "type": ["string", "null"] },
            "description": "Google authorization code (optional when provided in body)"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "enum": ["application/json"] }
          },
          {
            "name": "Cookie",
            "in": "header",
            "required": false,
            "schema": { "type": "string", "example": "auth=<token>" }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/GoogleLoginRequest" },
              "examples": {
                "default": {
                  "value": { "authCode": "GOOGLE_AUTHORIZATION_CODE_HERE" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authenticated via Google",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LoginResponse" },
                "examples": {
                  "default": {
                    "value": {
                      "access_token": "<token>",
                      "tokenExpiration": 1760091358000
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --location '{{baseUrl}}/api/auth/google/login?authCode=null' --header 'Content-Type: application/json' --header 'Cookie: auth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MDIwMWNmNWIzNjQ0YjQ4YmNiMzU4YSIsInJvbGUiOiJ1c2VyIiwic3RhdHVzIjoiYXBwcm92ZWQiLCJpYXQiOjE3NTc0OTkzNTgsImV4cCI6MTc2MDA5MTM1OH0.sLuF-XybcpHVs-Z3lTRUGGzeh3Omk1YsLAcWvSgfZYc' --data '{\n    \"authCode\": \"GOOGLE_AUTHORIZATION_CODE_HERE\"\n}'"
          }
        ]
      }
    },
    "/api/voices/{id}": {
      "put": {
        "summary": "Update Voice",
        "description": "Update an existing voice agent's details by its unique identifier. Only the provided fields will be updated.",
        "tags": ["Voices"],
        "operationId": "updateVoice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique ID of the voice agent to update",
            "schema": {
              "type": "string",
              "example": "64e5f12345abcdef12345678"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "example": "auth=<jwt-token>"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVoiceRequest"
              },
              "example": {
                "name": "Emma Updated",
                "description": "Updated description for this voice",
                "speed": 1.2,
                "tags": ["updated", "customer-service", "professional"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Voice updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceResponse"
                },
                "example": {
                  "_id": "64e5f12345abcdef12345678",
                  "name": "Emma Updated",
                  "description": "Updated description for this voice",
                  "speed": 1.2,
                  "tags": ["updated", "customer-service", "professional"],
                  "provider": "elevenlabs",
                  "provider_voice_id": "21m00Tcm4TlvDq8ikWAM",
                  "pitch": 1.0,
                  "language": "en-US",
                  "sample_url": "https://example.com/voice-samples/emma.mp3",
                  "createdAt": "2025-03-04T19:16:09.610Z",
                  "updatedAt": "2025-05-03T14:00:00.000Z",
                  "__v": 0
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data"
          },
          "404": {
            "description": "Voice not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --location --request PUT '{{baseUrl}}/api/voices/{id}' \\\n--header 'Content-Type: application/json' \\\n--header 'Cookie: auth=<jwt-token>' \\\n--data '{\n  \"name\": \"Emma Updated\",\n  \"description\": \"Updated description for this voice\",\n  \"speed\": 1.2,\n  \"tags\": [\"updated\", \"customer-service\", \"professional\"]\n}'"
          }
        ]
      },
      "delete": {
        "summary": "Delete Voice",
        "description": "Delete a voice agent by its unique identifier. This action is irreversible.",
        "tags": ["Voices"],
        "operationId": "deleteVoice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique ID of the voice agent to delete",
            "schema": {
              "type": "string",
              "example": "64e5f12345abcdef12345678"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "example": "auth=<jwt-token>"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Voice deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteVoiceResponse"
                },
                "example": {
                  "message": "Voice deleted successfully"
                }
              }
            }
          },
          "404": {
            "description": "Voice not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --location --request DELETE '{{baseUrl}}/api/voices/{id}' \\\n--header 'Content-Type: application/json' \\\n--header 'Cookie: auth=<jwt-token>'"
          }
        ]
      },
      "get": {
        "summary": "Get Voice by ID",
        "description": "Retrieve details of a single voice agent by its unique identifier.",
        "tags": ["Voices"],
        "operationId": "getVoiceById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique ID of the voice agent",
            "schema": {
              "type": "string",
              "example": "67c75179663b11a3fcbbcb85"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "example": "application/json" }
          },
          {
            "name": "Cookie",
            "in": "header",
            "required": false,
            "schema": { "type": "string", "example": "auth=<jwt-token>" }
          }
        ],
        "responses": {
          "200": {
            "description": "Voice retrieved successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VoiceAgent" },
                "examples": {
                  "default": {
                    "value": {
                      "_id": "67c75179663b11a3fcbbcb85",
                      "modelId": "iWNf11sz1GrUE4ppxTOL",
                      "agent_name": "Rajesh",
                      "trait": "calm, receptionist, event scheduler, Advertisement/infomercial",
                      "imageUrl": "https://agent-image-1.s3.ap-south-1.amazonaws.com/Rajesh.jpeg",
                      "languages": [
                        "Hindi_hi-IN",
                        "English_en-IN",
                        "Tamil_ta-IN"
                      ],
                      "gender": "Male",
                      "createdAt": "2025-03-04T19:16:09.610Z",
                      "updatedAt": "2025-03-04T19:16:09.610Z"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Voice not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --location '{{baseUrl}}/api/voices/{id}' \\\n--header 'Content-Type: application/json' \\\n--header 'Cookie: auth=<jwt-token>'"
          }
        ]
      }
    },
    "/api/agents/get-agent-id-by-phone-id": {
      "post": {
        "summary": "Get Agent IDs by Phone IDs",
        "description": "This endpoint retrieves agent IDs associated with a list of phone IDs. Useful to map multiple phone numbers to their corresponding agents.",
        "tags": ["Agents"],
        "operationId": "getAgentIdByPhoneId",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "example": "Bearer {{authToken}}" }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "enum": ["application/json"] }
          },
          {
            "name": "Cookie",
            "in": "header",
            "required": false,
            "schema": { "type": "string", "example": "auth=<token>" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAgentIdByPhoneIdRequest"
              },
              "examples": {
                "default": {
                  "value": {
                    "phoneId": [
                      "68ac46f39388e151abc5e388",
                      "6853d286b819d90c0f6e77cc",
                      "68516459045d02277594be99"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of agent IDs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAgentIdByPhoneIdResponse"
                },
                "examples": {
                  "default": {
                    "value": {
                      "message": "Agent IDs retrieved successfully",
                      "agents": [
                        {
                          "phoneId": "68ac46f39388e151abc5e388",
                          "agentId": "684135442bc2d87ddfe0697f"
                        },
                        {
                          "phoneId": "6853d286b819d90c0f6e77cc",
                          "agentId": "684135442bc2d87ddfe0698"
                        },
                        {
                          "phoneId": "68516459045d02277594be99",
                          "agentId": "684135442bc2d87ddfe0699"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --location '{{baseUrl}}/api/agents/get-agent-id-by-phone-id' \\\n--header 'Authorization: Bearer {{authToken}}' \\\n--header 'Content-Type: application/json' \\\n--header 'Cookie: auth=<token>' \\\n--data '{\"phoneId\":[\"68ac46f39388e151abc5e388\",\"6853d286b819d90c0f6e77cc\",\"68516459045d02277594be99\"]}'"
          }
        ]
      }
    },
    "/api/agents/unlink-agent": {
      "post": {
        "summary": "Unlink Agent from Phone",
        "description": "Documentation\n{{baseUrl}}/api/agents/unlink-agent\n\n### Request Description\nThis endpoint removes the association between an agent and a phone by clearing the agentId reference from the phone record.\n\n### Request\n- Method: POST\n- Content-Type: application/json\n- Must include the phoneId of the phone to unlink.",
        "tags": ["Agents"],
        "operationId": "unlinkAgentFromPhone",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "enum": ["application/json"] }
          },
          {
            "name": "Cookie",
            "in": "header",
            "required": false,
            "schema": { "type": "string", "example": "auth=<token>" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "phoneId": {
                    "type": "string",
                    "example": "68516459045d02277594be99"
                  },
                  "workflowType": { "type": "string", "example": "outbound" },
                  "type": { "type": "string", "example": "workflow" }
                },
                "required": ["phoneId"]
              },
              "examples": {
                "default": {
                  "value": {
                    "phoneId": "68516459045d02277594be99",
                    "workflowType": "outbound",
                    "type": "workflow"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Agent unlinked from phone successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PhoneResponse" },
                "examples": {
                  "default": {
                    "value": {
                      "message": "Agent unlinked from phone successfully",
                      "phone": {
                        "_id": "68516459045d02277594be99",
                        "agentId": null,
                        "phoneNumber": "+1234567890",
                        "status": "active",
                        "workflowType": "outbound",
                        "type": "workflow",
                        "createdAt": "2025-07-25T10:16:46.282Z",
                        "updatedAt": "2025-09-11T12:00:00.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing phoneId or no agent linked",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" },
                "examples": {
                  "missingPhoneId": {
                    "value": { "message": "phoneId is required" }
                  },
                  "noAgentLinked": {
                    "value": { "message": "No agent linked to this phone" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Phone not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" },
                "examples": {
                  "default": { "value": { "message": "Phone not found" } }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --location '{{baseUrl}}/api/agents/unlink-agent' \\\n--header 'Content-Type: application/json' \\\n--data '{\"phoneId\":\"68516459045d02277594be99\",\"workflowType\":\"outbound\",\"type\":\"workflow\"}'"
          }
        ]
      }
    },
    "/api/voices": {
      "post": {
        "summary": "Create Voice",
        "description": "Creates a new voice agent with the given details such as name, gender, type, provider, provider voice ID, pitch, speed, language, tags, sample URL, and description.",
        "tags": ["Voices"],
        "operationId": "createVoice",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "example": "application/json" }
          },
          {
            "name": "Cookie",
            "in": "header",
            "required": false,
            "schema": { "type": "string", "example": "auth=<jwt-token>" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateVoiceRequest" },
              "examples": {
                "default": {
                  "value": {
                    "name": "Emma",
                    "gender": "Female",
                    "type": "premium",
                    "provider": "elevenlabs",
                    "provider_voice_id": "21m00Tcm4TlvDq8ikWAM",
                    "pitch": 1.0,
                    "speed": 1.0,
                    "language": "en-US",
                    "tags": ["customer-service", "professional"],
                    "sample_url": "https://example.com/voice-samples/emma.mp3",
                    "description": "Professional female voice with a friendly tone"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Voice created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Voice" },
                "examples": {
                  "default": {
                    "value": {
                      "_id": "67c75179663b11a3fcbbcb85",
                      "name": "Emma",
                      "gender": "Female",
                      "type": "premium",
                      "provider": "elevenlabs",
                      "provider_voice_id": "21m00Tcm4TlvDq8ikWAM",
                      "pitch": 1.0,
                      "speed": 1.0,
                      "language": "en-US",
                      "tags": ["customer-service", "professional"],
                      "sample_url": "https://example.com/voice-samples/emma.mp3",
                      "description": "Professional female voice with a friendly tone",
                      "createdAt": "2025-05-03T12:00:00.000Z",
                      "updatedAt": "2025-05-03T12:00:00.000Z",
                      "__v": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid data or missing fields"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --location '{{baseUrl}}/api/voices/' \\\n--header 'Content-Type: application/json' \\\n--header 'Cookie: auth=<jwt-token>' \\\n--data '{\n  \"name\": \"Emma\",\n  \"gender\": \"Female\",\n  \"type\": \"premium\",\n  \"provider\": \"elevenlabs\",\n  \"provider_voice_id\": \"21m00Tcm4TlvDq8ikWAM\",\n  \"pitch\": 1.0,\n  \"speed\": 1.0,\n  \"language\": \"en-US\",\n  \"tags\": [\"customer-service\", \"professional\"],\n  \"sample_url\": \"https://example.com/voice-samples/emma.mp3\",\n  \"description\": \"Professional female voice with a friendly tone\"\n}'"
          }
        ]
      },
      "get": {
        "summary": "Get Voices",
        "description": "Retrieves a list of available voice agents with details such as name, language support, traits, gender, and metadata.",
        "tags": ["Voices"],
        "operationId": "getVoices",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "example": "application/json" }
          },
          {
            "name": "Cookie",
            "in": "header",
            "required": false,
            "schema": { "type": "string", "example": "auth=<jwt-token>" }
          }
        ],
        "responses": {
          "200": {
            "description": "List of voices retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/VoiceAgent" }
                },
                "examples": {
                  "default": {
                    "value": [
                      {
                        "_id": "67c75179663b11a3fcbbcb85",
                        "modelId": "iWNf11sz1GrUE4ppxTOL",
                        "agent_name": "Rajesh",
                        "trait": "calm, receptionist, event scheduler, Advertisement/infomercial",
                        "imageUrl": "https://agent-image-1.s3.ap-south-1.amazonaws.com/Rajesh.jpeg",
                        "languages": [
                          "Hindi_hi-IN",
                          "English_en-IN",
                          "Tamil_ta-IN"
                        ],
                        "gender": "Male",
                        "createdAt": "2025-03-04T19:16:09.610Z",
                        "updatedAt": "2025-03-04T19:16:09.610Z"
                      },
                      {
                        "_id": "67c75185663b11a3fcbbcb8a",
                        "modelId": "en-GB-AdaMultilingualNeural",
                        "agent_name": "Nirmala",
                        "trait": "calm, receptionist, event scheduler, Advertisement/infomercial",
                        "imageUrl": "https://agent-image-1.s3.ap-south-1.amazonaws.com/Nirmala.jpeg",
                        "languages": [
                          "English_en-IN",
                          "Hindi_hi-IN",
                          "Tamil_ta-IN",
                          "Telugu_te-IN",
                          "Malyalam_ml-IN",
                          "Bengali_bn-IN",
                          "Kannada_kn-IN",
                          "Czech_cs-CZ"
                        ],
                        "gender": "Female",
                        "createdAt": "2025-03-04T19:16:21.737Z",
                        "updatedAt": "2025-04-02T14:22:01.830Z"
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - Unable to fetch voices"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --location '{{baseUrl}}/api/voices/' \\\n--header 'Content-Type: application/json' \\\n--header 'Cookie: auth=<jwt-token>'"
          }
        ]
      }
    },
    "/api/auth/login": {
      "post": {
        "summary": "Login",
        "description": "Documentation\n{{baseUrl}}/api/auth/login\n\n### API Request Description\nThis API endpoint allows users to log in and obtain an access token for authentication.\n\n### Request Body\n- email (string): The email address of the user.\n- password (string): The password for the user's account.\n\n### Response Body\nUpon successful login, the server responds with a status code of 201 and a JSON object containing the user's information and access token.",
        "tags": ["Authentication"],
        "operationId": "authLogin",
        "security": [],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "enum": ["application/json"] }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LoginRequest" },
              "examples": {
                "default": {
                  "value": { "email": "team@weya.ai", "password": "1234" }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Authenticated",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LoginResponse" },
                "examples": {
                  "default": {
                    "value": {
                      "address": {},
                      "_id": "680201cf5b3644b48bcb358a",
                      "username": "Praveen",
                      "email": "team@weya.ai",
                      "role": "user",
                      "status": "approved",
                      "totalCalls": 3,
                      "totalCost": 301911,
                      "profilePicture": "https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png",
                      "phoneNumbers": ["6802043b5b3644b48bcb3621"],
                      "topup": 0,
                      "organization": {},
                      "resetPasswordToken": null,
                      "resetPasswordExpires": null,
                      "teamSize": "50-100",
                      "createdAt": "2025-04-18T07:39:59.859Z",
                      "updatedAt": "2025-07-25T10:16:46.282Z",
                      "access_token": "<token>",
                      "tokenExpiration": 1760091358000
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --location '{{baseUrl}}/api/auth/login' --header 'Content-Type: application/json' --data-raw '{\\n    \"email\": \"team@weya.ai\",\\n    \"password\": \"1234\"\\n}'"
          }
        ]
      }
    },
    "/api/agents/ambient-noise/options": {
      "get": {
        "summary": "Get Ambient Noise Options",
        "description": "Documentation\n{{baseUrl}}/api/agents/ambient-noise/options\n\n### Request Description\nThis endpoint retrieves the list of available ambient noise audio configurations that can be applied to enhance the realism of agent voice responses.\n\n### Request\n- This is a simple GET request and does not require a request body.\n- Must include a valid Authorization header (Bearer token).",
        "tags": ["Ambient Noise"],
        "operationId": "getAmbientNoiseOptions",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "example": "Bearer {{authToken}}" }
          },
          {
            "name": "Cookie",
            "in": "header",
            "required": false,
            "schema": { "type": "string", "example": "auth=<token>" }
          }
        ],
        "responses": {
          "200": {
            "description": "Ambient noise options retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AmbientNoiseOptionsResponse"
                },
                "examples": {
                  "default": {
                    "value": [
                      {
                        "tts_model_id": "eleven_turbo_v2_5",
                        "volume": 0.5,
                        "_id": "6803c781faedd4d54e53f286",
                        "audio_file_name": "office-ambience-6322.wav",
                        "name": "office"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --location '{{baseUrl}}/api/agents/ambient-noise/options' \\\n--header 'Authorization: Bearer {{authToken}}' \\\n--header 'Cookie: auth=<token>'"
          }
        ]
      }
    },
    "/api/agents/link-agent": {
      "post": {
        "summary": "Link Agent to Phone",
        "description": "Documentation\n{{baseUrl}}/api/agents/link-agent\n\n### Request Description\nThis endpoint associates an existing agent with a specific phone by updating the phone record to reference the agent.\n\n### Request\n- Method: POST\n- Content-Type: application/json\n- Must include a valid Authorization header (Bearer token if required) or Cookie header.\n- The request body must include the following fields:\n  - agentId (string, required): The ID of the agent to link\n  - phoneId (string, required): The ID of the phone to be updated\n  - agentType (string, optional): Type of agent (e.g., outbound)\n  - workflowId (string, optional): Associated workflow ID\n  - workflowType (string, optional): Type of workflow (e.g., outbound)\n  - type (string, optional): Entity type, usually 'agent'",
        "tags": ["Agents"],
        "operationId": "linkAgentToPhone",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": { "type": "string", "example": "Bearer {{authToken}}" }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "enum": ["application/json"] }
          },
          {
            "name": "Cookie",
            "in": "header",
            "required": false,
            "schema": { "type": "string", "example": "auth=<token>" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["agentId", "phoneId"],
                "properties": {
                  "agentId": {
                    "type": "string",
                    "description": "The ID of the agent to link"
                  },
                  "phoneId": {
                    "type": "string",
                    "description": "The ID of the phone to be updated"
                  },
                  "agentType": {
                    "type": "string",
                    "description": "Type of agent (e.g., outbound)"
                  },
                  "workflowId": {
                    "type": "string",
                    "description": "Associated workflow ID"
                  },
                  "workflowType": {
                    "type": "string",
                    "description": "Type of workflow (e.g., outbound)"
                  },
                  "type": {
                    "type": "string",
                    "description": "Entity type, usually 'agent'"
                  }
                }
              },
              "examples": {
                "default": {
                  "value": {
                    "agentId": "684135442bc2d87ddfe0697f",
                    "phoneId": "68516459045d02277594be99",
                    "agentType": "outbound",
                    "workflowId": "68a45da7d4b3035aee9cb690",
                    "workflowType": "outbound",
                    "type": "agent"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Agent linked to phone successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PhoneResponse" },
                "examples": {
                  "default": {
                    "value": {
                      "message": "Agent linked to phone successfully",
                      "phone": {
                        "_id": "68516459045d02277594be99",
                        "agentId": "684135442bc2d87ddfe0697f"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "phoneId and agentId are required",
            "content": {
              "application/json": {
                "examples": {
                  "default": {
                    "value": { "message": "phoneId and agentId are required" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Phone or Agent not found",
            "content": {
              "application/json": {
                "examples": {
                  "phoneNotFound": {
                    "value": { "message": "Phone not found" }
                  },
                  "agentNotFound": { "value": { "message": "Agent not found" } }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "examples": {
                  "default": { "value": { "message": "Internal Server Error" } }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --location '{{baseUrl}}/api/agents/link-agent' \\\n--header 'Content-Type: application/json' \\\n--header 'Cookie: auth=<token>' \\\n--data '{\n  \"agentId\": \"684135442bc2d87ddfe0697f\",\n  \"phoneId\": \"68516459045d02277594be99\",\n  \"agentType\": \"outbound\",\n  \"workflowId\": \"68a45da7d4b3035aee9cb690\",\n  \"workflowType\": \"outbound\",\n  \"type\": \"agent\"\n}'"
          }
        ]
      }
    },
    "/api/auth/profile": {
      "get": {
        "summary": "Get Profile",
        "description": "Documentation\n{{baseUrl}}/api/auth/profile\n\n### Request Description\nThis endpoint retrieves the profile information of the authenticated user.\n\n### Request\n- This is a simple GET request and does not require a request body.\n- Must include a valid Authorization header (Bearer token).",
        "tags": ["Authentication"],
        "operationId": "authGetProfile",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "example": "Bearer {{authToken}}" }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "enum": ["application/json"] }
          },
          {
            "name": "Cookie",
            "in": "header",
            "required": false,
            "schema": { "type": "string", "example": "auth=<token>" }
          }
        ],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GetProfileResponse" },
                "examples": {
                  "default": {
                    "value": {
                      "success": true,
                      "user": {
                        "_id": "680201cf5b3644b48bcb358a",
                        "username": "Praveen",
                        "email": "team@weya.ai",
                        "role": "user",
                        "status": "approved",
                        "totalCalls": 3,
                        "totalCost": 301911,
                        "profilePicture": "https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png",
                        "phoneNumbers": ["6802043b5b3644b48bcb3621"],
                        "topup": 0,
                        "organization": "Company",
                        "teamSize": "50-100",
                        "createdAt": "2025-04-18T07:39:59.859Z",
                        "updatedAt": "2025-07-25T10:16:46.282Z",
                        "__v": 0
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" },
                "examples": {
                  "default": { "value": { "message": "Unauthorized" } }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --location '{{baseUrl}}/api/auth/profile' \\\n--header 'Authorization: Bearer {{authToken}}' \\\n--header 'Content-Type: application/json' \\\n--header 'Cookie: auth=<token>'"
          }
        ]
      },
      "put": {
        "summary": "Update Profile",
        "description": "Documentation\n{{baseUrl}}/api/auth/profile\n\n### Request Description\nThis endpoint allows the authenticated user to update their profile information.\n\n### Request\n- Method: PUT\n- Content-Type: multipart/form-data\n- Must include a valid Authorization header (Bearer token)\n- The request body accepts form-data with the following fields:\n  - firstName (string, optional)\n  - lastName (string, optional)\n  - mobile (string, optional)\n  - companyName (string, optional)\n  - address (string, optional)\n  - profilePicture (file, optional)",
        "tags": ["Authentication"],
        "operationId": "authUpdateProfile",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "example": "Bearer {{authToken}}" }
          },
          {
            "name": "Cookie",
            "in": "header",
            "required": false,
            "schema": { "type": "string", "example": "auth=<token>" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": { "type": "string" },
                  "lastName": { "type": "string" },
                  "mobile": { "type": "string" },
                  "companyName": { "type": "string" },
                  "address": { "type": "string" },
                  "profilePicture": { "type": "string", "format": "binary" }
                }
              },
              "examples": {
                "default": {
                  "value": {
                    "firstName": "TestUser",
                    "lastName": "420",
                    "mobile": "1234567890",
                    "companyName": "Acme Inc.",
                    "address": "123 Main Street, New York, NY",
                    "profilePicture": "/path/to/file"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateProfileResponse"
                },
                "examples": {
                  "default": {
                    "value": {
                      "success": true,
                      "message": "Profile updated successfully",
                      "user": {
                        "_id": "680201cf5b3644b48bcb358a",
                        "username": "Praveen",
                        "email": "team@weya.ai",
                        "role": "user",
                        "status": "approved",
                        "totalCalls": 3,
                        "totalCost": 301911,
                        "profilePicture": "https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png",
                        "phoneNumbers": ["6802043b5b3644b48bcb3621"],
                        "topup": 0,
                        "organization": "Company",
                        "teamSize": "50-100",
                        "createdAt": "2025-04-18T07:39:59.859Z",
                        "updatedAt": "2025-07-25T10:16:46.282Z",
                        "__v": 0,
                        "companyName": "Acme Inc."
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" },
                "examples": {
                  "default": { "value": { "message": "Unauthorized" } }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --location --request PUT '{{baseUrl}}/api/auth/profile' \\\n--header 'Authorization: Bearer {{authToken}}' \\\n--form 'firstName=\"TestUser\"' \\\n--form 'lastName=\"420\"' \\\n--form 'mobile=\"1234567890\"' \\\n--form 'companyName=\"Acme Inc.\"' \\\n--form 'address=\"123 Main Street, New York, NY\"' \\\n--form 'profilePicture=@\"/path/to/file\"'"
          }
        ]
      }
    },
    "/api/auth/reset-password": {
      "post": {
        "summary": "Reset Password",
        "description": "Documentation\n{{baseUrl}}/api/auth/reset-password\n\n### Request Description\nThis endpoint is used to reset the user's password. The request should be sent as an HTTP POST to the specified URL with the reset token (received via email) and the new password in the request body.\n\n### Request Body\n- token (string, required): The reset token received via email.\n- newPassword (string, required): The new password to be set.\n\n### Response Description\nThe response will indicate whether the password reset was successful or failed. On success, a confirmation message is returned. On failure, an error message is provided (e.g., invalid or expired token).",
        "tags": ["Authentication"],
        "operationId": "authResetPassword",
        "security": [],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "enum": ["application/json"] }
          },
          {
            "name": "Cookie",
            "in": "header",
            "required": false,
            "schema": { "type": "string", "example": "auth=<token>" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ResetPasswordRequest" },
              "examples": {
                "default": {
                  "value": {
                    "token": "your_reset_token_received_via_email",
                    "newPassword": "your_new_password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResetPasswordResponse"
                },
                "examples": {
                  "default": {
                    "value": { "message": "Password reset successful" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or expired token",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" },
                "examples": {
                  "default": {
                    "value": { "message": "Invalid or expired token" }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --location '{{baseUrl}}/api/auth/reset-password' --header 'Content-Type: application/json' --header 'Cookie: auth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MDIwMWNmNWIzNjQ0YjQ4YmNiMzU4YSIsInJvbGUiOiJ1c2VyIiwic3RhdHVzIjoiYXBwcm92ZWQiLCJpYXQiOjE3NTc0OTkzNTgsImV4cCI6MTc2MDA5MTM1OH0.sLuF-XybcpHVs-Z3lTRUGGzeh3Omk1YsLAcWvSgfZYc' --data-raw '{\\n    \"token\": \"your_reset_token_received_via_email\",\\n    \"newPassword\": \"your_new_password\"\\n}'"
          }
        ]
      }
    },
    "/api/auth/status": {
      "get": {
        "summary": "Auth Status",
        "description": "Documentation\n{{baseUrl}}/api/auth/status\n\n### Request Description\nThis endpoint is used to retrieve the status of the authentication.\n\n### Request\n- No request body is required.\n- The request must include a valid Authorization header (Bearer token).\n\n### Response Description\n- **200 OK** – The request was successful, and the authentication status is returned in the response body.\n- **Error Handling** – If the token is invalid or expired, an error response will be returned.\n\n### Response Body\n- status (string): The authentication status.\n\n### Example Response\n```json\n{\n  \"status\": \"approved\"\n}\n```",
        "tags": ["Authentication"],
        "operationId": "authStatus",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer {{authToken}}"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["application/json"]
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "example": "auth=<token>"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthStatusResponse"
                },
                "examples": {
                  "default": {
                    "value": {
                      "status": "approved"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" },
                "examples": {
                  "default": { "value": { "message": "Unauthorized" } }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --location '{{baseUrl}}/api/auth/status' \\\n--header 'Authorization: Bearer {{authToken}}' \\\n--header 'Content-Type: application/json' \\\n--header 'Cookie: auth=<token>'"
          }
        ]
      }
    },

    "/api/agents/{id}": {
      "delete": {
        "summary": "Delete Agent",
        "description": "Permanently deletes an agent by its unique identifier. This operation is irreversible. Only authenticated users with appropriate access to the agent or its organization can perform deletions.",
        "tags": ["Agents"],
        "operationId": "deleteAgent",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "The unique identifier of the agent to delete"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "example": "Bearer {{authToken}}" }
          },
          {
            "name": "Cookie",
            "in": "header",
            "required": false,
            "schema": { "type": "string", "example": "auth=<token>" }
          }
        ],
        "responses": {
          "200": {
            "description": "Agent deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Agent deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Agent not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "No agent exists for the given ID"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "An unexpected error occurred during deletion"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --location --request DELETE '{{baseUrl}}/api/agents/64e5f12345abcdef12345678' \\\n--header 'Authorization: Bearer {{authToken}}'"
          }
        ]
      },
      "put": {
        "summary": "Update Agent",
        "description": "Updates the details of an existing agent by ID. Supports updating metadata, call settings, system messages, and tags. Multi-prompt agents have structured systemMessage updates, and role-based restrictions apply for websocketUrl updates.",
        "tags": ["Agents"],
        "operationId": "updateAgent",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Unique identifier of the agent to update"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "example": "Bearer {{authToken}}" }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "enum": ["application/json"] }
          },
          {
            "name": "Cookie",
            "in": "header",
            "required": false,
            "schema": { "type": "string", "example": "auth=<token>" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateAgentRequest" },
              "examples": {
                "default": {
                  "value": {
                    "agent_name": "Updated Agent Name",
                    "description": "Updated description for this agent",
                    "tags": ["updated", "modified"],
                    "callSetting": {
                      "voiceSpeed": 1.1,
                      "callTimeout": 40
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Agent updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateAgentResponse"
                },
                "examples": {
                  "default": {
                    "value": {
                      "success": true,
                      "message": "Agent updated successfully",
                      "agent": {
                        "_id": "6815701194899f4a2b71c0bc",
                        "agent_name": "Updated Agent Name",
                        "description": "Updated description for this agent",
                        "tags": ["updated", "modified"],
                        "callSetting": {
                          "voiceSpeed": 1.1,
                          "callTimeout": 40
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --location --request PUT '{{baseUrl}}/api/agents/6815701194899f4a2b71c0bc' \\\n--header 'Authorization: Bearer {{authToken}}' \\\n--header 'Content-Type: application/json' \\\n--header 'Cookie: auth=<token>' \\\n--data '{\"agent_name\":\"Updated Agent Name\",\"description\":\"Updated description for this agent\",\"tags\":[\"updated\",\"modified\"],\"callSetting\":{\"voiceSpeed\":1.1,\"callTimeout\":40}}'"
          }
        ]
      }
    },
    "/api/agents/test-agent-chat": {
      "post": {
        "summary": "Test Agent Chat",
        "description": "Simulate a chat session with a specific agent. Send chat history, dynamic variables, and timezone information to get the agent's response.",
        "tags": ["Agents"],
        "operationId": "testAgentChat",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "example": "Bearer {{authToken}}" }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "enum": ["application/json"] }
          },
          {
            "name": "Cookie",
            "in": "header",
            "required": false,
            "schema": { "type": "string", "example": "auth=<token>" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["agentId", "chat_history", "timezone"],
                "properties": {
                  "agentId": {
                    "type": "string",
                    "description": "ID of the agent to test chat with"
                  },
                  "variable": {
                    "type": "object",
                    "description": "Dynamic variables to inject into agent responses",
                    "additionalProperties": { "type": "string" }
                  },
                  "chat_history": {
                    "type": "array",
                    "description": "List of previous messages in the conversation",
                    "items": {
                      "type": "object",
                      "required": ["role", "content"],
                      "properties": {
                        "role": {
                          "type": "string",
                          "enum": ["USER", "AGENT"],
                          "description": "Sender of the message"
                        },
                        "content": {
                          "type": "string",
                          "description": "Message content"
                        }
                      }
                    }
                  },
                  "timezone": {
                    "type": "string",
                    "description": "Timezone of the user sending the messages"
                  }
                },
                "example": {
                  "agentId": "684135442bc2d87ddfe0697f",
                  "variable": { "customer_name": "Arvind" },
                  "chat_history": [
                    { "role": "USER", "content": "Hello" },
                    {
                      "role": "AGENT",
                      "content": "Hello Viju! This is Zara from i-SON Health. I wanted to remind you that your next medication refill is scheduled for the 25th of May, 2025. Have you had a chance to refill your medication since your last refill on the 10th of May?"
                    },
                    { "role": "USER", "content": "Bye Bye" }
                  ],
                  "timezone": "Asia/Kolkata"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Agent response returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Chat processed successfully"
                    },
                    "response": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "role": {
                            "type": "string",
                            "enum": ["USER", "AGENT"]
                          },
                          "content": { "type": "string" }
                        }
                      }
                    }
                  },
                  "example": {
                    "message": "Chat processed successfully",
                    "response": [
                      {
                        "role": "AGENT",
                        "content": "Hello Arvind! How can I assist you today?"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --location '{{baseUrl}}/api/agents/test-agent-chat' \\\n--header 'Authorization: Bearer {{authToken}}' \\\n--header 'Content-Type: application/json' \\\n--header 'Cookie: auth=<token>' \\\n--data '{\"agentId\":\"684135442bc2d87ddfe0697f\",\"variable\":{\"customer_name\":\"Arvind\"},\"chat_history\":[{\"role\":\"USER\",\"content\":\"Hello\"},{\"role\":\"AGENT\",\"content\":\"Hello Viju! This is Zara from i-SON Health...\"},{\"role\":\"USER\",\"content\":\"Bye Bye\"}],\"timezone\":\"Asia/Kolkata\"}'"
          }
        ]
      }
    },
    "/api/agents": {
      "get": {
        "summary": "Get Agents",
        "description": "Documentation\n{{baseUrl}}/api/agents/\n\n### API Request Description\nThis endpoint retrieves the list of agents associated with the authenticated user's organization. Each agent includes details such as their type, status, assigned workflows, and configuration settings.",
        "tags": ["Agents"],
        "operationId": "getAgents",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "example": "Bearer {{authToken}}" }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "enum": ["application/json"] }
          },
          {
            "name": "Cookie",
            "in": "header",
            "required": false,
            "schema": { "type": "string", "example": "auth=<token>" }
          }
        ],
        "responses": {
          "200": {
            "description": "List of agents retrieved successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GetAgentsResponse" },
                "examples": {
                  "default": {
                    "value": {
                      "message": "Agents retrieved successfully",
                      "agents": [
                        {
                          "_id": "684135442bc2d87ddfe0697f",
                          "name": "Agent 1",
                          "type": "outbound",
                          "status": "active",
                          "workflowId": "68a45da7d4b3035aee9cb690",
                          "workflowType": "outbound",
                          "ambientNoise": {
                            "enable": true,
                            "name": "office",
                            "volume": 0.5,
                            "tts_model_id": "eleven_turbo_v2_5"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --location '{{baseUrl}}/api/agents/' \\\n--header 'Authorization: Bearer {{authToken}}' \\\n--header 'Content-Type: application/json' \\\n--header 'Cookie: auth=<token>'"
          }
        ]
      },

      "post": {
        "summary": "Create Agent",
        "description": "Documentation\n{{baseUrl}}/api/agents/\n\n### API Request Description\nThis endpoint creates a new agent with the specified configuration. The agent can be assigned a voice, call settings, tags, and system messages to guide its behavior.",
        "tags": ["Agents"],
        "operationId": "createAgent",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "example": "Bearer {{authToken}}" }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "enum": ["application/json"] }
          },
          {
            "name": "Cookie",
            "in": "header",
            "required": false,
            "schema": { "type": "string", "example": "auth=<token>" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateAgentRequest" },
              "examples": {
                "default": {
                  "value": {
                    "agent_name": "Customer Support Agent",
                    "gender": "Female",
                    "type": "premium",
                    "capability": "Customer Service",
                    "description": "AI assistant trained to handle customer inquiries and support tickets",
                    "voice": "60a7b1c2d3e4f5a6b7c8d9e0",
                    "callSetting": {
                      "voiceSpeed": 1.0,
                      "vocabulary": ["support", "ticket", "refund", "order"],
                      "callTimeout": 30
                    },
                    "tags": ["support", "customer-service", "help-desk"],
                    "startMessage": "Hello! I'm your support assistant. How can I help you today?",
                    "systemMessage": "You are a helpful customer support agent for Acme Inc. Your goal is to assist customers with their inquiries about products, orders, and services.",
                    "selectedLanguage": ["en-US", "en-IN"],
                    "conversationType": "single_prompt"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Agent created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAgentResponse"
                },
                "examples": {
                  "default": {
                    "value": {
                      "message": "Agent created successfully",
                      "agent": {
                        "_id": "684135442bc2d87ddfe0697f",
                        "agent_name": "Customer Support Agent",
                        "gender": "Female",
                        "type": "premium",
                        "capability": "Customer Service",
                        "description": "AI assistant trained to handle customer inquiries and support tickets",
                        "voice": "60a7b1c2d3e4f5a6b7c8d9e0",
                        "callSetting": {
                          "voiceSpeed": 1.0,
                          "vocabulary": [
                            "support",
                            "ticket",
                            "refund",
                            "order"
                          ],
                          "callTimeout": 30
                        },
                        "tags": ["support", "customer-service", "help-desk"],
                        "startMessage": "Hello! I'm your support assistant. How can I help you today?",
                        "systemMessage": "You are a helpful customer support agent for Acme Inc. Your goal is to assist customers with their inquiries about products, orders, and services.",
                        "selectedLanguage": ["en-US", "en-IN"],
                        "conversationType": "single_prompt"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --location '{{baseUrl}}/api/agents/' \\\n--header 'Authorization: Bearer {{authToken}}' \\\n--header 'Content-Type: application/json' \\\n--header 'Cookie: auth=<token>' \\\n--data '{\"agent_name\":\"Customer Support Agent\",\"gender\":\"Female\",\"type\":\"premium\",\"capability\":\"Customer Service\",\"description\":\"AI assistant trained to handle customer inquiries and support tickets\",\"voice\":\"60a7b1c2d3e4f5a6b7c8d9e0\",\"callSetting\":{\"voiceSpeed\":1.0,\"vocabulary\":[\"support\",\"ticket\",\"refund\",\"order\"],\"callTimeout\":30},\"tags\":[\"support\",\"customer-service\",\"help-desk\"],\"startMessage\":\"Hello! I'm your support assistant. How can I help you today?\",\"systemMessage\":\"You are a helpful customer support agent for Acme Inc. Your goal is to assist customers with their inquiries about products, orders, and services.\",\"selectedLanguage\":[\"en-US\",\"en-IN\"],\"conversationType\":\"single_prompt\"}'"
          }
        ]
      }
    },
    "/api/auth/signup": {
      "post": {
        "summary": "Signup",
        "description": "Documentation\n{{baseUrl}}/api/auth/signup\n\n### API Request Description\nThis API endpoint allows the user to sign up by providing necessary details such as username, email, password, phone number, team name, and team size.\n\n### Request Body\n- username (string): The username of the user.\n- email (string): The email address of the user.\n- password (string): The password for the user account.\n- phoneNumber (string): The phone number of the user.\n- teamName (string): The name of the team the user belongs to.\n- teamSize (number): The size of the team.\n\n### Response Body\nUpon successful execution, the API returns a status code of 201 and a JSON object with the listed fields (see schema).",
        "tags": ["Authentication"],
        "operationId": "authSignup",
        "security": [],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "enum": ["application/json"] }
          },
          {
            "name": "Cookie",
            "in": "header",
            "required": false,
            "schema": { "type": "string", "example": "auth=<token>" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SignupRequest" },
              "examples": {
                "default": {
                  "value": {
                    "username": "testuser",
                    "email": "testuser@company.com",
                    "password": "password123",
                    "phoneNumber": "1234567890",
                    "teamName": "Engineering",
                    "teamSize": 10
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SignupResponse" },
                "examples": {
                  "default": {
                    "value": {
                      "username": "testuser",
                      "email": "testuser@company.com",
                      "role": "user",
                      "status": "approved",
                      "totalCalls": 0,
                      "totalCost": 0,
                      "profilePicture": "https://example.com/pfp.png",
                      "phoneNumbers": ["1234567890"],
                      "topup": 0,
                      "organization": "Company",
                      "resetPasswordToken": null,
                      "resetPasswordExpires": null,
                      "teamSize": "10-50",
                      "address": {},
                      "_id": "67c8feb4e9b6889e7f59e10c",
                      "createdAt": "2025-09-10T12:00:00.000Z",
                      "updatedAt": "2025-09-10T12:00:00.000Z",
                      "__v": 0,
                      "access_token": "<token>",
                      "tokenExpiration": 3600
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --location '{{baseUrl}}/api/auth/signup' --header 'Content-Type: application/json' --header 'Cookie: auth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MDIwMWNmNWIzNjQ0YjQ4YmNiMzU4YSIsInJvbGUiOiJ1c2VyIiwic3RhdHVzIjoiYXBwcm92ZWQiLCJpYXQiOjE3NTc0OTkzNTgsImV4cCI6MTc2MDA5MTM1OH0.sLuF-XybcpHVs-Z3lTRUGGzeh3Omk1YsLAcWvSgfZYc' --data-raw '{\n    \"username\": \"testuser\",\n    \"email\": \"testuser@company.com\",\n    \"password\": \"password123\",\n    \"phoneNumber\": \"1234567890\",\n    \"teamName\": \"Engineering\",\n    \"teamSize\": 10\n}'"
          }
        ]
      }
    }
  },

  "components": {
    "schemas": {
      "ResetPasswordRequest": {
        "type": "object",
        "required": ["token", "newPassword"],
        "properties": {
          "token": { "type": "string" },
          "newPassword": { "type": "string" }
        }
      },
      "ResetPasswordResponse": {
        "type": "object",
        "properties": { "message": { "type": "string" } }
      },
      "RequestPasswordResetRequest": {
        "type": "object",
        "required": ["email"],
        "properties": { "email": { "type": "string", "format": "email" } }
      },
      "RequestPasswordResetResponse": {
        "type": "object",
        "properties": { "message": { "type": "string" } }
      },
      "GoogleLoginRequest": {
        "type": "object",
        "properties": {
          "authCode": {
            "type": "string",
            "description": "Google authorization code"
          }
        }
      },
      "AuthStatusResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "The authentication status",
            "example": "approved"
          }
        }
      },
      "AmbientNoiseOption": {
        "type": "object",
        "required": [
          "_id",
          "tts_model_id",
          "volume",
          "audio_file_name",
          "name"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier for the ambient noise option"
          },
          "tts_model_id": {
            "type": "string",
            "description": "The ID of the text-to-speech model associated with this noise"
          },
          "volume": {
            "type": "number",
            "description": "The volume level (0.0 to 1.0) for mixing the ambient noise"
          },
          "audio_file_name": {
            "type": "string",
            "description": "Name of the associated audio file"
          },
          "name": {
            "type": "string",
            "description": "Friendly name of the ambient noise setting"
          }
        }
      },
      "AmbientNoiseOptionsResponse": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/AmbientNoiseOption" }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": { "type": "string", "format": "email" },
          "password": { "type": "string", "format": "password" }
        }
      },
      "TestAgentChatRequest": {
        "type": "object",
        "required": ["agentId", "chat_history", "timezone"],
        "properties": {
          "agentId": {
            "type": "string",
            "description": "ID of the agent to test chat with"
          },
          "variable": {
            "type": "object",
            "description": "Dynamic variables to inject into agent responses",
            "additionalProperties": { "type": "string" }
          },
          "chat_history": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["role", "content"],
              "properties": {
                "role": { "type": "string", "enum": ["USER", "AGENT"] },
                "content": { "type": "string" }
              }
            }
          },
          "timezone": { "type": "string" }
        }
      },
      "CreateVoiceRequest": {
        "type": "object",
        "required": [
          "name",
          "gender",
          "type",
          "provider",
          "provider_voice_id",
          "pitch",
          "speed",
          "language"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the voice agent",
            "example": "Emma"
          },
          "gender": {
            "type": "string",
            "description": "Gender of the voice agent",
            "example": "Female"
          },
          "type": {
            "type": "string",
            "description": "Type of the voice (e.g., standard, premium)",
            "example": "premium"
          },
          "provider": {
            "type": "string",
            "description": "Name of the voice provider",
            "example": "elevenlabs"
          },
          "provider_voice_id": {
            "type": "string",
            "description": "Unique provider identifier for the voice model",
            "example": "21m00Tcm4TlvDq8ikWAM"
          },
          "pitch": {
            "type": "number",
            "format": "float",
            "description": "Pitch of the voice (0.5–2.0)",
            "example": 1.0
          },
          "speed": {
            "type": "number",
            "format": "float",
            "description": "Speed of the voice (0.5–2.0)",
            "example": 1.0
          },
          "language": {
            "type": "string",
            "description": "Language spoken by the voice",
            "example": "en-US"
          },
          "tags": {
            "type": "array",
            "description": "Tags describing the voice",
            "items": { "type": "string" },
            "example": ["customer-service", "professional"]
          },
          "sample_url": {
            "type": "string",
            "description": "URL to a sample audio file",
            "example": "https://example.com/voice-samples/emma.mp3"
          },
          "description": {
            "type": "string",
            "description": "Short description of the voice agent",
            "example": "Professional female voice with a friendly tone"
          }
        }
      },

      "TestAgentChatResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Chat processed successfully"
          },
          "response": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "role": { "type": "string", "enum": ["USER", "AGENT"] },
                "content": { "type": "string" }
              }
            }
          }
        }
      },
      "GetAgentIdByPhoneIdRequest": {
        "type": "object",
        "required": ["phoneId"],
        "properties": {
          "phoneId": {
            "type": "array",
            "items": { "type": "string" },
            "description": "List of phone IDs to retrieve corresponding agent IDs"
          }
        }
      },
      "GetAgentIdByPhoneIdResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Agent IDs retrieved successfully"
          },
          "agents": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "phoneId": {
                  "type": "string",
                  "description": "Phone ID associated with agent"
                },
                "agentId": {
                  "type": "string",
                  "description": "Agent ID linked to the phone"
                }
              }
            }
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "address": { "type": "object" },
          "authMethod": { "type": "string" },
          "_id": { "type": "string" },
          "username": { "type": "string" },
          "email": { "type": "string" },
          "role": { "type": "string" },
          "status": { "type": "string" },
          "totalCalls": { "type": "number" },
          "totalCost": { "type": "number" },
          "profilePicture": { "type": "string" },
          "phoneNumbers": { "type": "array", "items": { "type": "string" } },
          "topup": { "type": "number" },
          "organization": { "type": "object" },
          "resetPasswordToken": { "type": ["string", "null"] },
          "resetPasswordExpires": { "type": ["string", "null"] },
          "teamSize": { "type": "string" },
          "createdAt": { "type": "string" },
          "updatedAt": { "type": "string" },
          "__v": { "type": "number" },
          "avgCallDuration": { "type": "number" },
          "totalDuration": { "type": "number" },
          "access_token": { "type": "string" },
          "tokenExpiration": { "type": "number" }
        }
      },
      "GetProfileResponse": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "user": {
            "type": "object",
            "properties": {
              "_id": { "type": "string" },
              "username": { "type": "string" },
              "email": { "type": "string" },
              "role": { "type": "string" },
              "status": { "type": "string" },
              "totalCalls": { "type": "integer" },
              "totalCost": { "type": "integer" },
              "profilePicture": { "type": "string" },
              "phoneNumbers": {
                "type": "array",
                "items": { "type": "string" }
              },
              "topup": { "type": "integer" },
              "organization": { "type": "string" },
              "teamSize": { "type": "string" },
              "createdAt": { "type": "string" },
              "updatedAt": { "type": "string" },
              "__v": { "type": "integer" }
            }
          }
        }
      },

      "UpdateAmbientNoiseRequest": {
        "type": "object",
        "required": ["enable", "name"],
        "properties": {
          "enable": {
            "type": "boolean",
            "description": "Whether ambient noise should be enabled",
            "example": true
          },
          "name": {
            "type": "string",
            "description": "Name of the ambient noise configuration (e.g., 'office', 'restaurant')",
            "example": "restaurant"
          },
          "volume": {
            "type": "number",
            "description": "Volume level (must be between 0.2 and 0.8)",
            "example": 0.5
          },
          "tts_model_id": {
            "type": "string",
            "description": "TTS model to use (eleven_turbo_v2_5 or eleven_ultra_v2_5)",
            "example": "eleven_turbo_v2_5"
          },
          "audio_file_name": {
            "type": "string",
            "description": "Optional custom audio file name",
            "example": "restaurant-ambience.wav"
          }
        }
      },
      "ValidateConversationRequest": {
        "type": "object",
        "required": ["conversationType", "systemMessage"],
        "properties": {
          "conversationType": {
            "type": "string",
            "description": "The type of conversation, e.g., 'single_prompt' or 'multi_prompt'. Determines how the system will process the conversation.",
            "example": "multi_prompt"
          },
          "systemMessage": {
            "type": "object",
            "description": "Configuration object containing common instructions and states for the agent in the conversation.",
            "properties": {
              "common": {
                "type": "object",
                "description": "Common instructions and metadata for the agent.",
                "properties": {
                  "agent_information": {
                    "type": "string",
                    "description": "Information describing the agent's role or behavior.",
                    "example": "You are a customer service agent."
                  }
                }
              },
              "states": {
                "type": "object",
                "description": "Defines the states in a multi-step conversation and their goals.",
                "properties": {
                  "START": {
                    "type": "object",
                    "properties": {
                      "goal": {
                        "type": "string",
                        "description": "The goal or objective of the conversation at this state.",
                        "example": "Identify customer issue"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ValidateConversationResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Result of the validation process",
            "example": "Conversation configuration is valid"
          },
          "isValid": {
            "type": "boolean",
            "description": "Indicates whether the conversation configuration is valid or not",
            "example": true
          },
          "errors": {
            "type": "array",
            "description": "List of validation errors, if any",
            "items": { "type": "string" },
            "example": []
          }
        }
      },
      "UpdateAmbientNoiseResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Ambient noise settings updated successfully"
          },
          "settings": {
            "type": "object",
            "properties": {
              "enable": { "type": "boolean", "example": true },
              "name": { "type": "string", "example": "restaurant" },
              "volume": { "type": "number", "example": 0.5 },
              "tts_model_id": {
                "type": "string",
                "example": "eleven_turbo_v2_5"
              },
              "audio_file_name": {
                "type": "string",
                "example": "restaurant-ambience.wav"
              }
            }
          }
        }
      },
      "SignupRequest": {
        "type": "object",
        "required": [
          "username",
          "email",
          "password",
          "phoneNumber",
          "teamName",
          "teamSize"
        ],
        "properties": {
          "username": { "type": "string" },
          "email": { "type": "string", "format": "email" },
          "password": { "type": "string", "format": "password" },
          "phoneNumber": { "type": "string" },
          "teamName": { "type": "string" },
          "teamSize": { "type": "integer" }
        }
      },
      "AddKnowledgeBaseResponse": {
        "type": "object",
        "properties": {
          "message": { "type": "string" },
          "data": {
            "type": "object",
            "properties": {
              "_id": { "type": "string" },
              "organizationId": { "type": "string" },
              "knowledgeBaseName": { "type": "string" },
              "bucketUrl": { "type": "string" },
              "vectorDbCollection": { "type": "string" },
              "__v": { "type": "integer" }
            }
          }
        }
      },
      "GetAgentsResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Agents retrieved successfully"
          },
          "agents": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": { "type": "string" },
                "name": { "type": "string" },
                "type": {
                  "type": "string",
                  "description": "Agent type (inbound/outbound)"
                },
                "status": { "type": "string" },
                "workflowId": { "type": "string" },
                "workflowType": { "type": "string" },
                "ambientNoise": {
                  "type": "object",
                  "properties": {
                    "enable": { "type": "boolean" },
                    "name": { "type": "string" },
                    "volume": { "type": "number" },
                    "tts_model_id": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      },

      "UpdateProfileResponse": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "message": { "type": "string" },
          "user": {
            "type": "object",
            "properties": {
              "_id": { "type": "string" },
              "username": { "type": "string" },
              "email": { "type": "string" },
              "role": { "type": "string" },
              "status": { "type": "string" },
              "totalCalls": { "type": "integer" },
              "totalCost": { "type": "integer" },
              "profilePicture": { "type": "string" },
              "phoneNumbers": {
                "type": "array",
                "items": { "type": "string" }
              },
              "topup": { "type": "integer" },
              "organization": { "type": "string" },
              "teamSize": { "type": "string" },
              "createdAt": { "type": "string" },
              "updatedAt": { "type": "string" },
              "__v": { "type": "integer" },
              "companyName": { "type": "string" }
            }
          }
        }
      },
      "ConversationTemplate": {
        "type": "object",
        "required": ["_id", "name", "description", "conversationType"],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier of the template"
          },
          "name": {
            "type": "string",
            "description": "Name of the conversation template"
          },
          "description": {
            "type": "string",
            "description": "Brief description of the template"
          },
          "conversationType": {
            "type": "string",
            "description": "Type of conversation (single_prompt or multi_prompt)"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          }
        }
      },
      "CallResponse": {
        "type": "object",
        "required": ["message", "call"],
        "properties": {
          "message": {
            "type": "string",
            "description": "Status message of the call creation",
            "example": "Call created successfully"
          },
          "call": {
            "type": "object",
            "required": ["callId", "agentId", "name", "status"],
            "properties": {
              "callId": {
                "type": "string",
                "description": "Unique identifier of the created call",
                "example": "12345abcde"
              },
              "agentId": {
                "type": "string",
                "description": "ID of the agent associated with the call",
                "example": "684135442bc2d87ddfe0697f"
              },
              "name": {
                "type": "string",
                "description": "Name of the person or reference for the call",
                "example": "Arvind"
              },
              "status": {
                "type": "string",
                "description": "Current status of the call",
                "example": "initiated"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the call was created",
                "example": "2025-09-11T12:00:00Z"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the call was last updated",
                "example": "2025-09-11T12:00:00Z"
              }
            }
          }
        }
      },
      "CallResponseExample": {
        "message": "Call created successfully",
        "call": {
          "callId": "12345abcde",
          "agentId": "684135442bc2d87ddfe0697f",
          "name": "Arvind",
          "status": "initiated",
          "createdAt": "2025-09-11T12:00:00Z",
          "updatedAt": "2025-09-11T12:00:00Z"
        }
      },
      "ConversationTemplatesResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Conversation templates retrieved successfully"
          },
          "templates": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ConversationTemplate" }
          }
        }
      },
      "SignupResponse": {
        "type": "object",
        "properties": {
          "username": { "type": "string" },
          "email": { "type": "string" },
          "role": { "type": "string" },
          "status": { "type": "string" },
          "totalCalls": { "type": "number" },
          "totalCost": { "type": "number" },
          "profilePicture": { "type": "string" },
          "phoneNumbers": { "type": "array", "items": { "type": "string" } },
          "topup": { "type": "number" },
          "organization": { "type": "string" },
          "resetPasswordToken": { "type": "string" },
          "resetPasswordExpires": { "type": "string" },
          "teamSize": { "type": "string" },
          "address": { "type": "object" },
          "_id": { "type": "string" },
          "createdAt": { "type": "string" },
          "updatedAt": { "type": "string" },
          "__v": { "type": "number" },
          "access_token": { "type": "string" },
          "tokenExpiration": { "type": "number" }
        }
      },

      "DeleteAgentResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Agent deleted successfully"
          },
          "agent": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "example": "64e5f12345abcdef12345678"
              },
              "agent_name": {
                "type": "string",
                "example": "Customer Support Agent"
              },
              "type": {
                "type": "string",
                "example": "premium"
              },
              "capability": {
                "type": "string",
                "example": "Customer Service"
              },
              "status": {
                "type": "string",
                "example": "deleted"
              },
              "tags": {
                "type": "array",
                "items": { "type": "string" },
                "example": ["support", "customer-service"]
              },
              "callSetting": {
                "type": "object",
                "properties": {
                  "voiceSpeed": { "type": "number", "example": 1.0 },
                  "callTimeout": { "type": "number", "example": 30 }
                }
              },
              "deletedAt": {
                "type": "string",
                "example": "2025-09-11T12:34:56.789Z"
              }
            }
          }
        }
      },
      "DeleteVoiceResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Voice deleted successfully"
          }
        }
      },
      "PhoneResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Agent linked to phone successfully"
          },
          "phone": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "example": "68516459045d02277594be99"
              },
              "agentId": {
                "type": "string",
                "example": "684135442bc2d87ddfe0697f"
              },
              "phoneNumber": {
                "type": "string",
                "example": "+1234567890"
              },
              "status": {
                "type": "string",
                "example": "active"
              },
              "workflowId": {
                "type": "string",
                "example": "68a45da7d4b3035aee9cb690"
              },
              "workflowType": {
                "type": "string",
                "example": "outbound"
              },
              "agentType": {
                "type": "string",
                "example": "outbound"
              },
              "type": {
                "type": "string",
                "example": "agent"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "example": "2025-07-25T10:16:46.282Z"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "example": "2025-09-11T12:00:00.000Z"
              }
            },
            "required": ["_id", "agentId"]
          }
        },
        "required": ["message", "phone"]
      },
      "VoiceAgent": {
        "type": "object",
        "required": [
          "_id",
          "modelId",
          "agent_name",
          "trait",
          "imageUrl",
          "languages",
          "gender",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier for the voice agent",
            "example": "67c75179663b11a3fcbbcb85"
          },
          "modelId": {
            "type": "string",
            "description": "ID of the voice model used",
            "example": "iWNf11sz1GrUE4ppxTOL"
          },
          "agent_name": {
            "type": "string",
            "description": "Name of the voice agent",
            "example": "Rajesh"
          },
          "trait": {
            "type": "string",
            "description": "Describes the characteristics of the voice",
            "example": "calm, receptionist, event scheduler, Advertisement/infomercial"
          },
          "imageUrl": {
            "type": "string",
            "description": "URL to the agent's image",
            "example": "https://agent-image-1.s3.ap-south-1.amazonaws.com/Rajesh.jpeg"
          },
          "languages": {
            "type": "array",
            "description": "Languages supported by the voice agent",
            "items": { "type": "string" },
            "example": ["Hindi_hi-IN", "English_en-IN", "Tamil_ta-IN"]
          },
          "gender": {
            "type": "string",
            "description": "Gender of the voice agent",
            "example": "Male"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the voice agent was created",
            "example": "2025-03-04T19:16:09.610Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the voice agent was last updated",
            "example": "2025-04-02T14:22:01.830Z"
          }
        }
      },
      "CreateUseCaseRequest": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "Unique identifier of the user creating the use case",
            "example": "684132694e7d1273d10e499a"
          },
          "agentId": {
            "type": "string",
            "description": "Unique identifier of the agent associated with this use case",
            "example": "684135442bc2d87ddfe0697f"
          },
          "useCaseLink": {
            "type": "string",
            "description": "Optional link related to the use case",
            "example": ""
          },
          "useCaseDesc": {
            "type": "string",
            "description": "Optional description of the use case",
            "example": ""
          },
          "file": {
            "type": "string",
            "format": "binary",
            "description": "File upload associated with the use case"
          },
          "useCaseName": {
            "type": "string",
            "description": "Name of the use case",
            "example": "TestingAgent"
          },
          "batchId": {
            "type": "string",
            "description": "Batch ID associated with the use case",
            "example": "684137042bc2d87ddfe06a30"
          },
          "phoneNumbers": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Phone numbers linked to the use case",
            "example": ["6853d286b819d90c0f6e77cc"]
          }
        },
        "required": ["userId", "agentId", "useCaseName", "batchId"]
      },
      "UseCaseResponse": {
        "type": "object",
        "properties": {
          "_id": { "type": "string", "example": "6853e3a46b819d90c0f6e77dd" },
          "userId": { "type": "string", "example": "684132694e7d1273d10e499a" },
          "agentId": {
            "type": "string",
            "example": "684135442bc2d87ddfe0697f"
          },
          "useCaseName": { "type": "string", "example": "TestingAgent" },
          "useCaseLink": { "type": "string", "example": "" },
          "useCaseDesc": { "type": "string", "example": "" },
          "fileUrl": {
            "type": "string",
            "example": "https://bucket-name.s3.region.amazonaws.com/usecases/file.pdf"
          },
          "batchId": {
            "type": "string",
            "example": "684137042bc2d87ddfe06a30"
          },
          "phoneNumbers": {
            "type": "array",
            "items": { "type": "string" },
            "example": ["6853d286b819d90c0f6e77cc"]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-05-03T15:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-05-03T15:00:00.000Z"
          }
        }
      },
      "CreateAgentRequest": {
        "type": "object",
        "required": [
          "agent_name",
          "gender",
          "type",
          "capability",
          "description",
          "voice",
          "callSetting",
          "conversationType"
        ],
        "properties": {
          "agent_name": { "type": "string" },
          "gender": { "type": "string" },
          "type": { "type": "string", "description": "Agent tier or level" },
          "capability": { "type": "string" },
          "description": { "type": "string" },
          "voice": { "type": "string", "description": "Voice ID for TTS" },
          "callSetting": {
            "type": "object",
            "properties": {
              "voiceSpeed": { "type": "number" },
              "vocabulary": { "type": "array", "items": { "type": "string" } },
              "callTimeout": { "type": "number" }
            }
          },
          "tags": { "type": "array", "items": { "type": "string" } },
          "startMessage": { "type": "string" },
          "systemMessage": { "type": "string" },
          "selectedLanguage": {
            "type": "array",
            "items": { "type": "string" }
          },
          "conversationType": {
            "type": "string",
            "enum": ["single_prompt", "multi_prompt"]
          }
        }
      },
      "AddPhoneRequest": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "Unique identifier of the user to associate with the phone number",
            "example": "64e5f12345abcdef12345678"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone number to be added (must be in E.164 format)",
            "example": "+15551234567"
          },
          "integration": {
            "type": "string",
            "description": "Third-party integration provider (e.g., Twilio)",
            "example": "twilio"
          },
          "authToken": {
            "type": "string",
            "description": "Integration authentication token",
            "example": "your_twilio_auth_token"
          },
          "accSId": {
            "type": "string",
            "description": "Integration account SID",
            "example": "your_twilio_account_sid"
          }
        },
        "required": [
          "userId",
          "phoneNumber",
          "integration",
          "authToken",
          "accSId"
        ]
      },
      "AddPhoneResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "phone": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "example": "605c72ef1532073ac924d4bc"
              },
              "userId": {
                "type": "string",
                "example": "64e5f12345abcdef12345678"
              },
              "phoneNumber": {
                "type": "string",
                "example": "+15551234567"
              },
              "integration": {
                "type": "string",
                "example": "twilio"
              },
              "authToken": {
                "type": "string",
                "example": "your_twilio_auth_token"
              },
              "accSId": {
                "type": "string",
                "example": "your_twilio_account_sid"
              }
            }
          }
        }
      },
      "CreateAgentResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Agent created successfully"
          },
          "agent": { "$ref": "#/components/schemas/CreateAgentRequest" }
        }
      },
      "KnowledgeBase": {
        "type": "object",
        "required": [
          "_id",
          "organizationId",
          "knowledgeBaseName",
          "bucketUrl",
          "vectorDbCollection",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier of the knowledge base",
            "example": "64e5f12345abcdef12345678"
          },
          "organizationId": {
            "type": "string",
            "description": "Identifier of the organization associated with the knowledge base",
            "example": "org1234567890"
          },
          "VoiceAgent": {
            "type": "object",
            "required": [
              "_id",
              "modelId",
              "agent_name",
              "trait",
              "imageUrl",
              "languages",
              "gender",
              "createdAt",
              "updatedAt"
            ],
            "properties": {
              "_id": {
                "type": "string",
                "description": "Unique identifier for the voice agent",
                "example": "67c75179663b11a3fcbbcb85"
              },
              "modelId": {
                "type": "string",
                "description": "ID of the voice model used",
                "example": "iWNf11sz1GrUE4ppxTOL"
              },
              "agent_name": {
                "type": "string",
                "description": "Name of the voice agent",
                "example": "Rajesh"
              },
              "trait": {
                "type": "string",
                "description": "Describes the characteristics of the voice",
                "example": "calm, receptionist, event scheduler, Advertisement/infomercial"
              },
              "imageUrl": {
                "type": "string",
                "description": "URL to the agent's image",
                "example": "https://agent-image-1.s3.ap-south-1.amazonaws.com/Rajesh.jpeg"
              },
              "languages": {
                "type": "array",
                "description": "Languages supported by the voice agent",
                "items": { "type": "string" },
                "example": ["Hindi_hi-IN", "English_en-IN", "Tamil_ta-IN"]
              },
              "gender": {
                "type": "string",
                "description": "Gender of the voice agent",
                "example": "Male"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the voice agent was created",
                "example": "2025-03-04T19:16:09.610Z"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the voice agent was last updated",
                "example": "2025-03-04T19:16:09.610Z"
              }
            }
          },
          "knowledgeBaseName": {
            "type": "string",
            "description": "Name of the knowledge base",
            "example": "Technical Documentation"
          },
          "bucketUrl": {
            "type": "string",
            "description": "Amazon S3 bucket URL where files are uploaded",
            "example": "https://bucket-name.s3.region.amazonaws.com/org1234567890/64e5f12345abcdef12345678/"
          },
          "vectorDbCollection": {
            "type": "string",
            "description": "Generated vector database collection ID for semantic search",
            "example": "generated-collection-id"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the knowledge base was created",
            "example": "2025-01-15T08:21:33.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the knowledge base was last updated",
            "example": "2025-01-15T08:21:33.000Z"
          }
        }
      },
      "KnowledgeBaseResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Files uploaded successfully, vectorDbCollection updated"
          },
          "data": {
            "$ref": "#/components/schemas/KnowledgeBase"
          }
        }
      },
      "UpdateAgentRequest": {
        "type": "object",
        "properties": {
          "agent_name": { "type": "string" },
          "description": { "type": "string" },
          "tags": { "type": "array", "items": { "type": "string" } },
          "callSetting": {
            "type": "object",
            "properties": {
              "voiceSpeed": { "type": "number" },
              "callTimeout": { "type": "number" }
            }
          },
          "conversationType": {
            "type": "string",
            "enum": ["single_prompt", "multi_prompt"]
          },
          "systemMessage": {
            "oneOf": [{ "type": "string" }, { "type": "object" }]
          },
          "backendSchema": { "type": "object" },
          "websocketUrl": {
            "type": "string",
            "description": "Super Admin only; must start with wss://"
          },
          "profilePicture": { "type": "string", "format": "binary" }
        }
      },
      "UpdateAgentResponse": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "message": { "type": "string" },
          "agent": {
            "type": "object",
            "properties": {
              "_id": { "type": "string" },
              "agent_name": { "type": "string" },
              "description": { "type": "string" },
              "tags": { "type": "array", "items": { "type": "string" } },
              "callSetting": {
                "type": "object",
                "properties": {
                  "voiceSpeed": { "type": "number" },
                  "callTimeout": { "type": "number" }
                }
              }
            }
          }
        }
      },

      "Voice": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier for the created voice agent",
            "example": "67c75179663b11a3fcbbcb85"
          },
          "name": {
            "type": "string",
            "example": "Emma"
          },
          "gender": {
            "type": "string",
            "example": "Female"
          },
          "type": {
            "type": "string",
            "example": "premium"
          },
          "provider": {
            "type": "string",
            "example": "elevenlabs"
          },
          "provider_voice_id": {
            "type": "string",
            "example": "21m00Tcm4TlvDq8ikWAM"
          },
          "pitch": {
            "type": "number",
            "example": 1.0
          },
          "speed": {
            "type": "number",
            "example": 1.0
          },
          "language": {
            "type": "string",
            "example": "en-US"
          },
          "tags": {
            "type": "array",
            "items": { "type": "string" },
            "example": ["customer-service", "professional"]
          },
          "sample_url": {
            "type": "string",
            "example": "https://example.com/voice-samples/emma.mp3"
          },
          "description": {
            "type": "string",
            "example": "Professional female voice with a friendly tone"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-05-03T12:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-05-03T12:00:00.000Z"
          },
          "__v": {
            "type": "integer",
            "example": 0
          }
        }
      },
      "GetAgentByIdResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Agent retrieved successfully"
          },
          "agent": {
            "type": "object",
            "properties": {
              "_id": { "type": "string" },
              "name": { "type": "string" },
              "type": {
                "type": "string",
                "description": "Agent type (inbound/outbound)"
              },
              "status": { "type": "string" },
              "workflowId": { "type": "string" },
              "workflowType": { "type": "string" },
              "ambientNoise": {
                "type": "object",
                "properties": {
                  "enable": { "type": "boolean" },
                  "name": { "type": "string" },
                  "volume": { "type": "number" },
                  "tts_model_id": { "type": "string" }
                }
              }
            }
          }
        }
      },
      "UpdateVoiceRequest": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "example": "Emma Updated" },
          "description": {
            "type": "string",
            "example": "Updated description for this voice"
          },
          "speed": { "type": "number", "example": 1.2 },
          "tags": {
            "type": "array",
            "items": { "type": "string" },
            "example": ["updated", "customer-service", "professional"]
          }
        }
      },
      "VoiceResponse": {
        "type": "object",
        "properties": {
          "_id": { "type": "string", "example": "64e5f12345abcdef12345678" },
          "name": { "type": "string", "example": "Emma Updated" },
          "description": {
            "type": "string",
            "example": "Updated description for this voice"
          },
          "speed": { "type": "number", "example": 1.2 },
          "tags": {
            "type": "array",
            "items": { "type": "string" },
            "example": ["updated", "customer-service", "professional"]
          },
          "provider": { "type": "string", "example": "elevenlabs" },
          "provider_voice_id": {
            "type": "string",
            "example": "21m00Tcm4TlvDq8ikWAM"
          },
          "pitch": { "type": "number", "example": 1.0 },
          "language": { "type": "string", "example": "en-US" },
          "sample_url": {
            "type": "string",
            "example": "https://example.com/voice-samples/emma.mp3"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-03-04T19:16:09.610Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-05-03T14:00:00.000Z"
          },
          "__v": { "type": "integer", "example": 0 }
        }
      },
      "Plant": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the plant",
            "type": "string"
          },
          "tag": {
            "description": "Tag to specify the type",
            "type": "string"
          }
        }
      },
      "NewPlant": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Plant"
          },
          {
            "required": ["id"],
            "type": "object",
            "properties": {
              "id": {
                "description": "Identification number of the plant",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "Error": {
        "required": ["error", "message"],
        "type": "object",
        "properties": {
          "error": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
